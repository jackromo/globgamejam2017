<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

image_speed = 0;

player = instance_find(obj_sonar_player, 0);
son_ctrl = instance_find(obj_sonar_control, 0);

image_alpha = 0;
alpha_change_speed = 0.05;

fading = false;
fading_in = false;
fading_out = false;

ai_state = "idle";  // can be 'idle', 'alert-wait', 'alert-look', 'seen-run', or 'seen-fight'

mov_spd = 2;
hspd = random_range(-1, 1);
vspd = 2;
step_count = 0;

hp = 0;
max_hp = 0;
if(object_index == obj_enemy_sub_small) {
    hp = 1;
    max_hp = 1;
} else {
    hp = 2;
    max_hp = 2;
}

step_count = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up sound

s_emit = audio_emitter_create();
audio_falloff_set_model(audio_falloff_exponent_distance);
audio_emitter_falloff(s_emit, 100, 300, 1);
if(object_index == obj_enemy_sub_small) {
    sub_snd = audio_play_sound_on(s_emit, snd_sub_small, true, 0);
} else {
    sub_snd = audio_play_sound_on(s_emit, snd_sub_big, true, 2);
}
audio_emitter_position(s_emit, x, y, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop sound

audio_stop_sound(sub_snd);
audio_emitter_free(s_emit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Die if no health or below screen

if((hp &lt;= 0) or (y &gt; room_height)) {
    instance_destroy();
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage fade

if(fading) {
    if((not fading_in) and (not fading_out)) {
        fading_in = true;
    } else if(fading_in and (not fading_out)) {
        if(image_alpha &lt; 1) {
            image_alpha += 2*alpha_change_speed;
        }
        if(image_alpha &gt;= 1) {
            image_alpha = 1;
            fading_in = false;
            fading_out = true;
        }
    } else if (fading_out and (not fading_in)){
        if(image_alpha &gt; 0) {
            image_alpha -= alpha_change_speed;
        }
        if(image_alpha &lt;= 0) {
            image_alpha = 0;
            fading_out = false;
            fading = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manage AI state and appropriate action

dist_to_player = point_distance(player.x, player.y, x, y);

if(hp &lt; max_hp) {
    // no matter what, AI goes to fight mode when attacked
    ai_state = "seen-fight";
}

if(ai_state == "idle") {
    // if near and hit with sonar ping
    if((dist_to_player &lt; 275) and fading) {
        ai_state = "alert";
        vspd = 0;
        hspd = 0;
    // if nearer and engine on
    } else if((dist_to_player &lt; 200) and obj_control.engine_on) {
        ai_state = "alert";
        vspd = 0;
        hspd = 0;
    }
} else if(ai_state == "alert") {
    // start waiting and looking in intervals
    if(alarm[0] &lt;= 0) {
        if((vspd == 0) and (hspd == 0)) {
            alarm[0] = random_range(10, 30);
            vspd = sign(player.y - y);
            hspd = sign(player.x - x);
        } else {
            alarm[0] = random_range(60, 240);
            vspd = 0;
            hspd = 0;
        }
    }
    var has_seen = false;
    if((dist_to_player &lt; 200) and fading) {
        has_seen = true;
    } else if((dist_to_player &lt; 125) and obj_control.engine_on) {
        has_seen = true;
    }
    if(has_seen) {
        // if big submarine, always fight
        if(object_index == obj_enemy_sub_big) {
            ai_state = "seen-fight";
        } else {
            // random chance of waiting, running, or fighting
            choice = random(1);
            if(choice &lt; 0.4) {
                ai_state = "seen-wait";
            } else if(choice &lt; 0.6) {
                ai_state = "seen-run";
            } else {
                ai_state = "seen-fight";
            }
        }
    }
} else if(ai_state == "seen-wait"){
    hspd = 0;
    vspd = 0;
    if(alarm[1] == 0) {
        ai_state = "seen-run";
    } else if(alarm[1] == -1) {
        alarm[1] = random_range(300, 600);
    }
} else if(ai_state == "seen-run") {
    vspd = 2;
    if(player.x &lt; x) {
        hspd = 1;
    } else {
        hspd = -1;
    }
} else if(ai_state == "seen-fight") {
    hspd = 0;
    vspd = 0;
    if(alarm[2] == -1) {
        alarm[2] = random_range(240, 360);
        torpedo = instance_create(x, y, obj_sonar_torpedo);
        torpedo.from_player = false;
        torpedo.target_x = player.x;
        torpedo.target_y = player.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update position every few steps

if((step_count % 8) == 0) {
    x += hspd;
    y += vspd;
    if(obj_control.engine_on) {
        x += lengthdir_x(2, 360 - obj_control.compass_angle);
        y += lengthdir_y(2, 360 - obj_control.compass_angle);
    }
}
step_count++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update image index

if(ai_state == "idle") {
    image_index = 0;
} else if(ai_state == "alert") {
    image_index = 1;
} else if(string_copy(ai_state, 1, 4) == "seen") {
    image_index = 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update sound emitter

audio_emitter_position(s_emit, x, y, 0);

if((room == rm_sonar) and (not son_ctrl.sonar_on)) {
    audio_emitter_gain(s_emit, 1);
} else {
    audio_emitter_gain(s_emit, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sonar_sweep">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start fading in

if(not fading) {
    fading = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play sonar ping

if(ai_state == "idle") {
    audio_play_sound(snd_sonar_ping, 0, false);    
} else if(ai_state == "alert") {
    audio_play_sound(snd_sonar_ping_alert, 0, false);
} else {
    audio_play_sound(snd_sonar_ping_seen, 0, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
